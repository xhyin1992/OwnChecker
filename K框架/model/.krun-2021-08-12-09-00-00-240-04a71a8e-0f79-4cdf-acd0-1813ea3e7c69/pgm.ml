let () = Plugin.load Sys.argv.(1)
open Prelude
open Constants
open Constants.K
open Run
let () = Sys.catch_break true
let () = Gc.set { (Gc.get()) with Gc.minor_heap_size = 33554432 }let input = Lexer.parse_k_binary_string
"\x7fKAST\x04\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00.\x00M\x00a\x00p\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x00$\x00P\x00G\x00M\x00\x00\x00\x00\x00\x00\x00\n\x00K\x00C\x00o\x00n\x00f\x00i\x00g\x00V\x00a\x00r\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00A\x00\x00\x00\x00\x00\x00\x00\x02\x00I\x00d\x02\x00\x00\x00\x00\x00\x00\x00\x17\x00.\x00L\x00i\x00s\x00t\x00{\x00\"\x00_\x00,\x00_\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\"\x00}\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x12\x00#\x00v\x00o\x00i\x00d\x00T\x00y\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00f\x00u\x00n\x00\x00\x00\x04\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x07\x00#\x00F\x00n\x00C\x00a\x00l\x00l\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x00\b\x00#\x00e\x00x\x00p\x00S\x00t\x00m\x00t\x00\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x16\x00.\x00L\x00i\x00s\x00t\x00{\x00\"\x00_\x00_\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\"\x00}\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\r\x00_\x00_\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x00\x06\x00#\x00b\x00l\x00o\x00c\x00k\x00\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\t\x00#\x00f\x00u\x00n\x00c\x00t\x00i\x00o\x00n\x00\x00\x00\x00\x04\x02\x00\x00\x00\x00\x00\x00\x00\r\x00_\x00;\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\x00\x00\x00\x01\x01\x00\x00\x00\b\x00\x00\x00\x0b\x02\x00\x00\x00\n\x00\x00\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00c\x00\x00\x00\x0c\x02\x00\x00\x00\x00\x00\x00\x00\x05\x00#\x00d\x00e\x00c\x00l\x00\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x0f\x00c\x00o\x00p\x00y\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x0f\x00.\x00L\x00i\x00s\x00t\x00{\x00\"\x00#\x00p\x00r\x00o\x00p\x00s\x00\"\x00}\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x06\x00#\x00p\x00r\x00o\x00p\x00s\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x00\x19\x00n\x00e\x00w\x00R\x00e\x00s\x00o\x00u\x00r\x00c\x00e\x00(\x00_\x00)\x00_\x00O\x00S\x00L\x00-\x00S\x00Y\x00N\x00T\x00A\x00X\x00\x00\x00\x00\x01\x01\x00\x00\x00\x06\x00\x00\x00\x11\x02\x00\x00\x00\x00\x00\x00\x00\t\x00#\x00t\x00r\x00a\x00n\x00s\x00f\x00e\x00r\x00\x00\x00\x00\x02\x01\x00\x00\x00\x13\x00\x00\x00\x12\x02\x00\x00\x00\x11\x00\x00\x00\x00\x00\x02\x00\x00\x00\x0e\x00\x00\x00\x00\x02\x02\x00\x00\x00\r\x00\x00\x00\x00\x01\x02\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x00\x02\x02\x00\x00\x00\x0b\x00\x00\x00\x00\x02\x02\x00\x00\x00\x0b\x00\x00\x00\x00\x02\x02\x00\x00\x00\n\x00\x00\x00\x00\x01\x02\x00\x00\x00\t\x00\x00\x00\x00\x04\x02\x00\x00\x00\b\x00\x00\x00\x00\x01\x01\x00\x00\x00\x13\x00\x00\x00\x12\x02\x00\x00\x00\x11\x00\x00\x00\x00\x00\x02\x00\x00\x00\x0e\x00\x00\x00\x00\x02\x02\x00\x00\x00\r\x00\x00\x00\x00\x01\x02\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x00\x02\x02\x00\x00\x00\x0b\x00\x00\x00\x00\x02\x02\x00\x00\x00\x0b\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x00\x05\x00_\x00|\x00-\x00>\x00_\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x00\x05\x00_\x00M\x00a\x00p\x00_\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\x06\x00$\x00S\x00T\x00D\x00I\x00N\x00\x00\x00\x17\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\"\x00\"\x00\x00\x00\x00\x00\x00\x00\x06\x00S\x00t\x00r\x00i\x00n\x00g\x02\x00\x00\x00\x05\x00\x00\x00\x00\x02\x02\x00\x00\x00\x04\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00$\x00I\x00O\x00\x00\x00\x1a\x01\x00\x00\x00\x00\x00\x00\x00\x04\x00\"\x00o\x00n\x00\"\x00\x00\x00\x03\x02\x00\x00\x00\x07\x00\x00\x00\x00\x02\x02\x00\x00\x00\x06\x00\x00\x00\x00\x02\x02\x00\x00\x00\x00\x00\x00\x00\t\x00i\x00n\x00i\x00t\x00T\x00C\x00e\x00l\x00l\x00\x00\x00\x00\x01\x07"
let out = open_out_bin "/home/user/workspace/ownership-language-osl/model/./.krun-2021-08-12-09-00-00-240-04a71a8e-0f79-4cdf-acd0-1813ea3e7c69/run.out"
let res, steps = run_no_thread_opt(input) (-1) 
let () = output_string out ((string_of_int steps) ^ "\n" ^ print_k_binary(res))
