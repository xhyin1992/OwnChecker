<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 32 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 32
        i |-> 34
        intNumber |-> 36
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        32 |-> #rs ( .Props )
        34 |-> #rs ( copy , .Props )
        36 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 32
        i |-> 34 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 32 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
      </write>
      <timer>
        37
      </timer>
      <indexes>
        #indexes ( 37 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    1
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodG2B ( .Exps ) ;  call goodB2G ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G
    </fname> , <funDef>
      <fname>
        goodB2G
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B
    </fname> , <funDef>
      <fname>
        goodG2B
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_01_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 44 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46
        intNumber |-> 48
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        44 |-> #rs ( .Props )
        46 |-> #rs ( copy , .Props )
        48 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 31 , 35 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
      </write>
      <timer>
        49
      </timer>
      <indexes>
        #indexes ( 49 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 45 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47
        intNumber |-> 49
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        45 |-> #rs ( .Props )
        47 |-> #rs ( copy , .Props )
        49 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
      </write>
      <timer>
        50
      </timer>
      <indexes>
        #indexes ( 50 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 50 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52
        intNumber |-> 54
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        50 |-> #rs ( .Props )
        52 |-> #rs ( copy , .Props )
        54 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 28 , 32 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 37 , 41 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
      </write>
      <timer>
        55
      </timer>
      <indexes>
        #indexes ( 55 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_02_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_02_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_02_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_02_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { .Stmts } , .Blocks ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_02_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_02_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 44 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46
        intNumber |-> 48
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        44 |-> #rs ( .Props )
        46 |-> #rs ( copy , .Props )
        48 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 31 , 35 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
      </write>
      <timer>
        49
      </timer>
      <indexes>
        #indexes ( 49 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 45 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47
        intNumber |-> 49
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        45 |-> #rs ( .Props )
        47 |-> #rs ( copy , .Props )
        49 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
      </write>
      <timer>
        50
      </timer>
      <indexes>
        #indexes ( 50 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 50 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52
        intNumber |-> 54
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        50 |-> #rs ( .Props )
        52 |-> #rs ( copy , .Props )
        54 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 28 , 32 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 37 , 41 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
      </write>
      <timer>
        55
      </timer>
      <indexes>
        #indexes ( 55 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { .Stmts } , .Blocks ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_03_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 48 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        i |-> 50
        intNumber |-> 52
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        48 |-> #rs ( .Props )
        50 |-> #rs ( copy , .Props )
        52 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        i |-> 50 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48 )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FALSE )
        ListItem ( STATIC_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 35 , 39 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
      </write>
      <timer>
        53
      </timer>
      <indexes>
        #indexes ( 53 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 53 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        i |-> 55
        intNumber |-> 57
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        53 |-> #rs ( .Props )
        55 |-> #rs ( copy , .Props )
        57 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        i |-> 55 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53 )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FALSE )
        ListItem ( STATIC_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 40 , 44 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
        SetItem ( #writev ( 57 , 58 ) )
      </write>
      <timer>
        58
      </timer>
      <indexes>
        #indexes ( 58 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        i |-> 51 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49 )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FALSE )
        ListItem ( STATIC_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 27 , 31 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 54 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        i |-> 56
        intNumber |-> 58
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        54 |-> #rs ( .Props )
        56 |-> #rs ( copy , .Props )
        58 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        i |-> 56 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54 )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FALSE |-> 2
        STATIC_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FALSE )
        ListItem ( STATIC_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 41 , 45 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
        SetItem ( #writev ( 58 , 59 ) )
      </write>
      <timer>
        59
      </timer>
      <indexes>
        #indexes ( 59 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_TRUE ;  @ { .Stmts } , .Blocks ;  STATIC_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_TRUE ;  @ { .Stmts } , .Blocks ;  STATIC_CONST_FALSE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_TRUE ;  @ { .Stmts } , .Blocks ;  STATIC_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_FALSE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  STATIC_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  STATIC_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_04_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 48 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        i |-> 50
        intNumber |-> 52
        staticFalse |-> 2
        staticTrue |-> 0
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        48 |-> #rs ( .Props )
        50 |-> #rs ( copy , .Props )
        52 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        i |-> 50
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( staticFalse )
        ListItem ( staticTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 35 , 39 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
      </write>
      <timer>
        53
      </timer>
      <indexes>
        #indexes ( 53 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 53 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        i |-> 55
        intNumber |-> 57
        staticFalse |-> 2
        staticTrue |-> 0
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        53 |-> #rs ( .Props )
        55 |-> #rs ( copy , .Props )
        57 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        i |-> 55
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( staticFalse )
        ListItem ( staticTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 40 , 44 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
        SetItem ( #writev ( 57 , 58 ) )
      </write>
      <timer>
        58
      </timer>
      <indexes>
        #indexes ( 58 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        i |-> 51
        intNumber |-> 53
        staticFalse |-> 2
        staticTrue |-> 0
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        i |-> 51
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( staticFalse )
        ListItem ( staticTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 27 , 31 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 54 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        i |-> 56
        intNumber |-> 58
        staticFalse |-> 2
        staticTrue |-> 0
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        54 |-> #rs ( .Props )
        56 |-> #rs ( copy , .Props )
        58 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        i |-> 56
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        staticFalse |-> 2
        staticTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( staticFalse )
        ListItem ( staticTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 41 , 45 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
        SetItem ( #writev ( 58 , 59 ) )
      </write>
      <timer>
        59
      </timer>
      <indexes>
        #indexes ( 59 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  staticTrue ;  @ { .Stmts } , .Blocks ;  staticTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  staticTrue ;  @ { .Stmts } , .Blocks ;  staticFalse ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  staticTrue ;  @ { .Stmts } , .Blocks ;  staticTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  staticFalse ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  staticTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  staticTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  staticTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_05_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 46 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        i |-> 48
        intNumber |-> 50
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        46 |-> #rs ( .Props )
        48 |-> #rs ( copy , .Props )
        50 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        i |-> 48 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46 )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 16 , 20 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 33 , 37 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
      </write>
      <timer>
        51
      </timer>
      <indexes>
        #indexes ( 51 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 51 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        i |-> 53
        intNumber |-> 55
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        51 |-> #rs ( .Props )
        53 |-> #rs ( copy , .Props )
        55 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        i |-> 53 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51 )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 12 , 16 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 21 , 25 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 38 , 42 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
      </write>
      <timer>
        56
      </timer>
      <indexes>
        #indexes ( 56 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 47 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        i |-> 49
        intNumber |-> 51
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        47 |-> #rs ( .Props )
        49 |-> #rs ( copy , .Props )
        51 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        i |-> 49 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47 )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 16 , 20 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 25 , 29 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 34 , 38 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
      </write>
      <timer>
        52
      </timer>
      <indexes>
        #indexes ( 52 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 52 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        i |-> 54
        intNumber |-> 56
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        52 |-> #rs ( .Props )
        54 |-> #rs ( copy , .Props )
        56 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        i |-> 54 )
        ListItem ( i )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52 )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52 )
        ListItem ( data )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( STATIC_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( STATIC_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 12 , 16 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 21 , 25 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 30 , 34 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 39 , 43 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
      </write>
      <timer>
        57
      </timer>
      <indexes>
        #indexes ( 57 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_06_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_06_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_FIVE ;  @ { .Stmts } , .Blocks ;  STATIC_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_06_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_06_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_FIVE ;  @ { .Stmts } , .Blocks ;  STATIC_CONST_FIVE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_FIVE ;  @ { .Stmts } , .Blocks ;  STATIC_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_FIVE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  STATIC_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  STATIC_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  STATIC_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_06_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_06_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        decl staticFive : #own ( copy , .Props ) ; ~> transfer newResource ( copy , .Props ) staticFive ;  fn printLine ( line : #own ( .Props ) , .Parameters ) -> #voidTy { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts } ;  fn printIntLine ( intNumber : #own ( copy , .Props ) , .Parameters ) -> #voidTy { intNumber ;  .Stmts } ;  fn CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_07_bad ( .Parameters ) -> #voidTy { decl data ;  transfer newResource ( .Props ) data ;  staticFive ;  @ { .Stmts } , .Blocks ;  staticFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts } ;  fn goodB2G1 ( .Parameters ) -> #voidTy { decl data ;  transfer newResource ( .Props ) data ;  staticFive ;  @ { .Stmts } , .Blocks ;  staticFive ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts } ;  fn goodB2G2 ( .Parameters ) -> #voidTy { decl data ;  transfer newResource ( .Props ) data ;  staticFive ;  @ { .Stmts } , .Blocks ;  staticFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts } ;  fn goodG2B1 ( .Parameters ) -> #voidTy { decl data ;  transfer newResource ( .Props ) data ;  staticFive ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  staticFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts } ;  fn goodG2B2 ( .Parameters ) -> #voidTy { decl data ;  transfer newResource ( .Props ) data ;  staticFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  staticFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts } ;  fn CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_07_good ( .Parameters ) -> #voidTy { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts } ;  fn main ( argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters ) -> #own ( copy , .Props ) { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_07_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_07_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts } ;  decl arg1 ;  decl argv1 ;  transfer newResource ( copy , .Props ) arg1 ;  transfer newResource ( .Props ) argv1 ;  call main ( arg1 , argv1 , .Exps ) ;  .Stmts
      </k>
      <env>
        .Map
      </env>
      <store>
        .Map
      </store>
      <stack>
        .List
      </stack>
      <write>
        .Set
      </write>
      <timer>
        0
      </timer>
      <indexes>
        #indexes ( 0 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    1
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    .FunDefCellMap
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 44 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46
        intNumber |-> 48
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        44 |-> #rs ( .Props )
        46 |-> #rs ( copy , .Props )
        48 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 31 , 35 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
      </write>
      <timer>
        49
      </timer>
      <indexes>
        #indexes ( 49 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 45 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47
        intNumber |-> 49
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        45 |-> #rs ( .Props )
        47 |-> #rs ( copy , .Props )
        49 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
      </write>
      <timer>
        50
      </timer>
      <indexes>
        #indexes ( 50 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 50 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52
        intNumber |-> 54
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        50 |-> #rs ( .Props )
        52 |-> #rs ( copy , .Props )
        54 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 28 , 32 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 37 , 41 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
      </write>
      <timer>
        55
      </timer>
      <indexes>
        #indexes ( 55 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call staticReturnsTrue ( .Exps ) ;  @ { .Stmts } , .Blocks ;  call staticReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call staticReturnsTrue ( .Exps ) ;  @ { .Stmts } , .Blocks ;  call staticReturnsFalse ( .Exps ) ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call staticReturnsTrue ( .Exps ) ;  @ { .Stmts } , .Blocks ;  call staticReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call staticReturnsFalse ( .Exps ) ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  call staticReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call staticReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  call staticReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_08_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      staticReturnsFalse
    </fname> , <funDef>
      <fname>
        staticReturnsFalse
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      staticReturnsTrue
    </fname> , <funDef>
      <fname>
        staticReturnsTrue
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 48 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        i |-> 50
        intNumber |-> 52
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        48 |-> #rs ( .Props )
        50 |-> #rs ( copy , .Props )
        52 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        i |-> 50 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48 )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FALSE )
        ListItem ( GLOBAL_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 35 , 39 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
      </write>
      <timer>
        53
      </timer>
      <indexes>
        #indexes ( 53 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 53 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        i |-> 55
        intNumber |-> 57
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        53 |-> #rs ( .Props )
        55 |-> #rs ( copy , .Props )
        57 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        i |-> 55 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53 )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FALSE )
        ListItem ( GLOBAL_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 40 , 44 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
        SetItem ( #writev ( 57 , 58 ) )
      </write>
      <timer>
        58
      </timer>
      <indexes>
        #indexes ( 58 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        i |-> 51 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49 )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FALSE )
        ListItem ( GLOBAL_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 27 , 31 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 54 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        i |-> 56
        intNumber |-> 58
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        54 |-> #rs ( .Props )
        56 |-> #rs ( copy , .Props )
        58 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        i |-> 56 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54 )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FALSE |-> 2
        GLOBAL_CONST_TRUE |-> 0
        arg1 |-> 4
        argv1 |-> 5 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FALSE )
        ListItem ( GLOBAL_CONST_TRUE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 41 , 45 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
        SetItem ( #writev ( 58 , 59 ) )
      </write>
      <timer>
        59
      </timer>
      <indexes>
        #indexes ( 59 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_09_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_09_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_TRUE ;  @ { .Stmts } , .Blocks ;  GLOBAL_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_09_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_09_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_TRUE ;  @ { .Stmts } , .Blocks ;  GLOBAL_CONST_FALSE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_TRUE ;  @ { .Stmts } , .Blocks ;  GLOBAL_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_FALSE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  GLOBAL_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  GLOBAL_CONST_TRUE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_09_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_09_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 48 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 50
        intNumber |-> 52
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        48 |-> #rs ( .Props )
        50 |-> #rs ( copy , .Props )
        52 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 50 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 48
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFalse )
        ListItem ( globalTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 35 , 39 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
      </write>
      <timer>
        53
      </timer>
      <indexes>
        #indexes ( 53 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 53 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 55
        intNumber |-> 57
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        53 |-> #rs ( .Props )
        55 |-> #rs ( copy , .Props )
        57 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 55 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 53
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFalse )
        ListItem ( globalTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 40 , 44 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
        SetItem ( #writev ( 57 , 58 ) )
      </write>
      <timer>
        58
      </timer>
      <indexes>
        #indexes ( 58 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 51 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 49
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFalse )
        ListItem ( globalTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 18 , 22 ) )
        SetItem ( #writev ( 20 , 21 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 27 , 31 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 54 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 56
        intNumber |-> 58
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        4 |-> #rs ( copy , .Props )
        5 |-> #uninit
        8 |-> #rs ( copy , .Props )
        10 |-> #rs ( .Props )
        54 |-> #rs ( .Props )
        56 |-> #rs ( copy , .Props )
        58 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        globalFalse |-> 2
        globalTrue |-> 0
        i |-> 56 )
        ListItem ( i )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        data |-> 54
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 4
        argc |-> 8
        argv1 |-> 5
        argv |-> 10
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 4
        argv1 |-> 5
        globalFalse |-> 2
        globalTrue |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFalse )
        ListItem ( globalTrue )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 3 ) )
        SetItem ( #writev ( 4 , 6 ) )
        SetItem ( #writev ( 5 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 41 , 45 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
        SetItem ( #writev ( 58 , 59 ) )
      </write>
      <timer>
        59
      </timer>
      <indexes>
        #indexes ( 59 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalTrue ;  @ { .Stmts } , .Blocks ;  globalTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalTrue ;  @ { .Stmts } , .Blocks ;  globalFalse ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalTrue ;  @ { .Stmts } , .Blocks ;  globalTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalFalse ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  globalTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  globalTrue ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_10_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 44 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46
        intNumber |-> 48
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        44 |-> #rs ( .Props )
        46 |-> #rs ( copy , .Props )
        48 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44
        i |-> 46 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 44 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 31 , 35 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
      </write>
      <timer>
        49
      </timer>
      <indexes>
        #indexes ( 49 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 49 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51
        intNumber |-> 53
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        49 |-> #rs ( .Props )
        51 |-> #rs ( copy , .Props )
        53 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49
        i |-> 51 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 49 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 36 , 40 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
      </write>
      <timer>
        54
      </timer>
      <indexes>
        #indexes ( 54 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 45 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47
        intNumber |-> 49
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        45 |-> #rs ( .Props )
        47 |-> #rs ( copy , .Props )
        49 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45
        i |-> 47 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 45 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 14 , 18 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 23 , 27 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 32 , 36 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
      </write>
      <timer>
        50
      </timer>
      <indexes>
        #indexes ( 50 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 50 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52
        intNumber |-> 54
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        50 |-> #rs ( .Props )
        52 |-> #rs ( copy , .Props )
        54 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50
        i |-> 52 )
        ListItem ( i )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 50 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 19 , 23 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 24 , 25 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 28 , 32 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 37 , 41 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
      </write>
      <timer>
        55
      </timer>
      <indexes>
        #indexes ( 55 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call globalReturnsTrue ( .Exps ) ;  @ { .Stmts } , .Blocks ;  call globalReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      globalReturnsFalse
    </fname> , <funDef>
      <fname>
        globalReturnsFalse
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      globalReturnsTrue
    </fname> , <funDef>
      <fname>
        globalReturnsTrue
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call globalReturnsTrue ( .Exps ) ;  @ { .Stmts } , .Blocks ;  call globalReturnsFalse ( .Exps ) ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call globalReturnsTrue ( .Exps ) ;  @ { .Stmts } , .Blocks ;  call globalReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call globalReturnsFalse ( .Exps ) ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  call globalReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call globalReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  call globalReturnsTrue ( .Exps ) ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_11_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 46 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        i |-> 48
        intNumber |-> 50
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        46 |-> #rs ( .Props )
        48 |-> #rs ( copy , .Props )
        50 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        i |-> 48 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46 )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 16 , 20 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 33 , 37 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
      </write>
      <timer>
        51
      </timer>
      <indexes>
        #indexes ( 51 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 51 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        i |-> 53
        intNumber |-> 55
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        51 |-> #rs ( .Props )
        53 |-> #rs ( copy , .Props )
        55 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        i |-> 53 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51 )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 12 , 16 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 21 , 25 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 38 , 42 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
      </write>
      <timer>
        56
      </timer>
      <indexes>
        #indexes ( 56 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 47 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        i |-> 49
        intNumber |-> 51
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        47 |-> #rs ( .Props )
        49 |-> #rs ( copy , .Props )
        51 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        i |-> 49 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47 )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 16 , 20 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 25 , 29 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 34 , 38 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
      </write>
      <timer>
        52
      </timer>
      <indexes>
        #indexes ( 52 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 52 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        i |-> 54
        intNumber |-> 56
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        52 |-> #rs ( .Props )
        54 |-> #rs ( copy , .Props )
        56 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        i |-> 54 )
        ListItem ( i )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52 )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52 )
        ListItem ( data )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( GLOBAL_CONST_FIVE |-> 0
        arg1 |-> 2
        argv1 |-> 3 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( GLOBAL_CONST_FIVE )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 12 , 16 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 21 , 25 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 30 , 34 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 39 , 43 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
      </write>
      <timer>
        57
      </timer>
      <indexes>
        #indexes ( 57 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_13_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_13_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_FIVE ;  @ { .Stmts } , .Blocks ;  GLOBAL_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_13_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_13_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_FIVE ;  @ { .Stmts } , .Blocks ;  GLOBAL_CONST_FIVE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_FIVE ;  @ { .Stmts } , .Blocks ;  GLOBAL_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_FIVE ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  GLOBAL_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  GLOBAL_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  GLOBAL_CONST_FIVE ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_13_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_13_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 46 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        globalFive |-> 0
        i |-> 48
        intNumber |-> 50
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        46 |-> #rs ( .Props )
        48 |-> #rs ( copy , .Props )
        50 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        globalFive |-> 0
        i |-> 48 )
        ListItem ( i )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        globalFive |-> 0 )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 46
        globalFive |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        globalFive |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 2
        argv1 |-> 3
        globalFive |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFive )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 16 , 20 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 29 , 30 ) )
        SetItem ( #writev ( 31 , 32 ) )
        SetItem ( #writev ( 33 , 34 ) )
        SetItem ( #writev ( 33 , 37 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 42 , 43 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
      </write>
      <timer>
        51
      </timer>
      <indexes>
        #indexes ( 51 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      1
    </index> , <state>
      <index>
        1
      </index>
      <k>
        #lvDref ( #loc ( 51 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        globalFive |-> 0
        i |-> 53
        intNumber |-> 55
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        51 |-> #rs ( .Props )
        53 |-> #rs ( copy , .Props )
        55 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        globalFive |-> 0
        i |-> 53 )
        ListItem ( i )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        globalFive |-> 0 )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 51
        globalFive |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        globalFive |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 2
        argv1 |-> 3
        globalFive |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFive )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 12 , 16 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 21 , 25 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 38 , 39 ) )
        SetItem ( #writev ( 38 , 42 ) )
        SetItem ( #writev ( 40 , 41 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
        SetItem ( #writev ( 53 , 54 ) )
        SetItem ( #writev ( 55 , 56 ) )
      </write>
      <timer>
        56
      </timer>
      <indexes>
        #indexes ( 56 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      2
    </index> , <state>
      <index>
        2
      </index>
      <k>
        #lvDref ( #loc ( 47 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        globalFive |-> 0
        i |-> 49
        intNumber |-> 51
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        47 |-> #rs ( .Props )
        49 |-> #rs ( copy , .Props )
        51 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        globalFive |-> 0
        i |-> 49 )
        ListItem ( i )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        globalFive |-> 0 )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 47
        globalFive |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        globalFive |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 2
        argv1 |-> 3
        globalFive |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFive )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 16 , 17 ) )
        SetItem ( #writev ( 16 , 20 ) )
        SetItem ( #writev ( 18 , 19 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 25 , 26 ) )
        SetItem ( #writev ( 25 , 29 ) )
        SetItem ( #writev ( 27 , 28 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 34 , 35 ) )
        SetItem ( #writev ( 34 , 38 ) )
        SetItem ( #writev ( 36 , 37 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 43 , 44 ) )
        SetItem ( #writev ( 45 , 46 ) )
        SetItem ( #writev ( 47 , 48 ) )
        SetItem ( #writev ( 49 , 50 ) )
        SetItem ( #writev ( 51 , 52 ) )
      </write>
      <timer>
        52
      </timer>
      <indexes>
        #indexes ( 52 , 0 )
      </indexes>
    </state> ) StateCellMapItem ( <index>
      3
    </index> , <state>
      <index>
        3
      </index>
      <k>
        #lvDref ( #loc ( 52 ) ) ~> #freezer#Transfer1_ ( #lv ( intNumber ) ) ~> #increaseIndex ~> #increaseTimer ~> intNumber ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        globalFive |-> 0
        i |-> 54
        intNumber |-> 56
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        2 |-> #rs ( copy , .Props )
        3 |-> #uninit
        6 |-> #rs ( copy , .Props )
        8 |-> #rs ( .Props )
        52 |-> #rs ( .Props )
        54 |-> #rs ( copy , .Props )
        56 |-> #uninit
      </store>
      <stack>
        ListItem ( intNumber )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        globalFive |-> 0
        i |-> 54 )
        ListItem ( i )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        globalFive |-> 0 )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        data |-> 52
        globalFive |-> 0 )
        ListItem ( data )
        ListItem ( arg1 |-> 2
        argc |-> 6
        argv1 |-> 3
        argv |-> 8
        globalFive |-> 0 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 2
        argv1 |-> 3
        globalFive |-> 0 )
        ListItem ( argv1 )
        ListItem ( arg1 )
        ListItem ( globalFive )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 1 ) )
        SetItem ( #writev ( 2 , 4 ) )
        SetItem ( #writev ( 3 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 12 , 16 ) )
        SetItem ( #writev ( 14 , 15 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
        SetItem ( #writev ( 21 , 22 ) )
        SetItem ( #writev ( 21 , 25 ) )
        SetItem ( #writev ( 23 , 24 ) )
        SetItem ( #writev ( 26 , 27 ) )
        SetItem ( #writev ( 28 , 29 ) )
        SetItem ( #writev ( 30 , 31 ) )
        SetItem ( #writev ( 30 , 34 ) )
        SetItem ( #writev ( 32 , 33 ) )
        SetItem ( #writev ( 35 , 36 ) )
        SetItem ( #writev ( 37 , 38 ) )
        SetItem ( #writev ( 39 , 40 ) )
        SetItem ( #writev ( 39 , 43 ) )
        SetItem ( #writev ( 41 , 42 ) )
        SetItem ( #writev ( 44 , 45 ) )
        SetItem ( #writev ( 46 , 47 ) )
        SetItem ( #writev ( 48 , 49 ) )
        SetItem ( #writev ( 50 , 51 ) )
        SetItem ( #writev ( 52 , 53 ) )
        SetItem ( #writev ( 54 , 55 ) )
        SetItem ( #writev ( 56 , 57 ) )
      </write>
      <timer>
        57
      </timer>
      <indexes>
        #indexes ( 57 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    4
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalFive ;  @ { .Stmts } , .Blocks ;  globalFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodB2G1 ( .Exps ) ;  call goodB2G2 ( .Exps ) ;  call goodG2B1 ( .Exps ) ;  call goodG2B2 ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G1
    </fname> , <funDef>
      <fname>
        goodB2G1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalFive ;  @ { .Stmts } , .Blocks ;  globalFive ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G2
    </fname> , <funDef>
      <fname>
        goodB2G2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalFive ;  @ { .Stmts } , .Blocks ;  globalFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B1
    </fname> , <funDef>
      <fname>
        goodG2B1
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalFive ;  @ { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  .Stmts } , { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  globalFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B2
    </fname> , <funDef>
      <fname>
        goodG2B2
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  globalFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  .Stmts } , .Blocks ;  globalFive ;  @ { { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_14_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 15 ) ) ~> #freezer#Transfer1_ ( #lv ( * data ) ) ~> #increaseIndex ~> #increaseTimer ~> { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call goodB2G ( .Exps ) ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 17
        dataPtr |-> 15
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        10 |-> #rs ( copy , .Props )
        15 |-> #rs ( copy , .Props )
        17 |-> #uninit
      </store>
      <stack>
        ListItem ( data )
        ListItem ( dataPtr )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 10 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
      </write>
      <timer>
        18
      </timer>
      <indexes>
        #indexes ( 18 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    1
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink ( data , .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodG2B ( .Exps ) ;  call goodB2G ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_badSink
      </fname>
      <fparams>
        dataPtr : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer * dataPtr * data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( * data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink
      </fname>
      <fparams>
        dataPtr : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer * dataPtr * data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink
      </fname>
      <fparams>
        dataPtr : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer * dataPtr * data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G
    </fname> , <funDef>
      <fname>
        goodB2G
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodB2GSink ( data , .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B
    </fname> , <funDef>
      <fname>
        goodG2B
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63b_goodG2BSink ( data , .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_63_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>
<T>
  <states>
    StateCellMapItem ( <index>
      0
    </index> , <state>
      <index>
        0
      </index>
      <k>
        #lvDref ( #loc ( 17 ) ) ~> #freezer#Transfer1_ ( #lv ( * data ) ) ~> #increaseIndex ~> #increaseTimer ~> { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call goodB2G ( .Exps ) ;  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts ~> #blockend ~> #void ~> #freezer#expStmt0_ ( ) ~> .Stmts
      </k>
      <env>
        arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 19
        dataPtr |-> 17
        dataVoidPtr |-> 15
      </env>
      <store>
        0 |-> #rs ( copy , .Props )
        1 |-> #uninit
        4 |-> #rs ( copy , .Props )
        6 |-> #rs ( .Props )
        10 |-> #rs ( copy , .Props )
        15 |-> #rs ( copy , .Props )
        17 |-> #rs ( copy , .Props )
        19 |-> #uninit
      </store>
      <stack>
        ListItem ( data )
        ListItem ( dataPtr )
        ListItem ( dataVoidPtr )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6
        data |-> 10 )
        ListItem ( data )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( arg1 |-> 0
        argc |-> 4
        argv1 |-> 1
        argv |-> 6 )
        ListItem ( argv )
        ListItem ( argc )
        ListItem ( arg1 |-> 0
        argv1 |-> 1 )
        ListItem ( argv1 )
        ListItem ( arg1 )
      </stack>
      <write>
        SetItem ( #writev ( 0 , 2 ) )
        SetItem ( #writev ( 1 , 3 ) )
        SetItem ( #writev ( 4 , 5 ) )
        SetItem ( #writev ( 6 , 7 ) )
        SetItem ( #writev ( 8 , 9 ) )
        SetItem ( #writev ( 10 , 11 ) )
        SetItem ( #writev ( 10 , 14 ) )
        SetItem ( #writev ( 12 , 13 ) )
        SetItem ( #writev ( 15 , 16 ) )
        SetItem ( #writev ( 17 , 18 ) )
        SetItem ( #writev ( 19 , 20 ) )
      </write>
      <timer>
        20
      </timer>
      <indexes>
        #indexes ( 20 , 0 )
      </indexes>
    </state> )
  </states>
  <nstate>
    1
  </nstate>
  <tmp>
    .List
  </tmp>
  <funDefs>
    FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_bad
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_bad
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_badSink ( data , .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_good
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_good
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { call goodG2B ( .Exps ) ;  call goodB2G ( .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_badSink
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_badSink
      </fname>
      <fparams>
        dataVoidPtr : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl dataPtr ;  transfer dataVoidPtr dataPtr ;  decl data ;  transfer * dataPtr * data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink
      </fname>
      <fparams>
        dataVoidPtr : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl dataPtr ;  transfer dataVoidPtr dataPtr ;  decl data ;  transfer * dataPtr * data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink
    </fname> , <funDef>
      <fname>
        CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink
      </fname>
      <fparams>
        dataVoidPtr : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl dataPtr ;  transfer dataVoidPtr dataPtr ;  decl data ;  transfer * dataPtr * data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  call printIntLine ( data , .Exps ) ;  .Stmts }  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodB2G
    </fname> , <funDef>
      <fname>
        goodB2G
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodB2GSink ( data , .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      goodG2B
    </fname> , <funDef>
      <fname>
        goodG2B
      </fname>
      <fparams>
        .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { decl data ;  transfer newResource ( .Props ) data ;  { decl i ;  transfer newResource ( copy , .Props ) i ;  transfer newResource ( copy , .Props ) data ;  .Stmts }  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64b_goodG2BSink ( data , .Exps ) ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      main
    </fname> , <funDef>
      <fname>
        main
      </fname>
      <fparams>
        argc : #own ( copy , .Props ) , argv : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #own ( copy , .Props )
      </fret>
      <fbody>
        { call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_good ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  call CWE457_Use_of_Uninitialized_Variable__int_array_malloc_no_init_64_bad ( .Exps ) ;  call printLine ( newResource ( copy , .Props ) , .Exps ) ;  val ( newResource ( copy , .Props ) )  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printIntLine
    </fname> , <funDef>
      <fname>
        printIntLine
      </fname>
      <fparams>
        intNumber : #own ( copy , .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { intNumber ;  .Stmts }
      </fbody>
    </funDef> ) FunDefCellMapItem ( <fname>
      printLine
    </fname> , <funDef>
      <fname>
        printLine
      </fname>
      <fparams>
        line : #own ( .Props ) , .Parameters
      </fparams>
      <fret>
        #voidTy
      </fret>
      <fbody>
        { line ;  @ { line ;  .Stmts } , .Blocks ;  .Stmts }
      </fbody>
    </funDef> )
  </funDefs>
</T>


real	0m16.653s
user	0m11.875s
sys	0m4.841s

real	0m38.115s
user	0m15.284s
sys	0m5.692s

real	0m39.950s
user	0m15.904s
sys	0m5.978s

real	0m52.296s
user	0m16.939s
sys	0m6.940s

real	0m45.996s
user	0m16.559s
sys	0m6.209s

real	0m41.568s
user	0m14.976s
sys	0m6.196s

real	0m11.221s
user	0m10.450s
sys	0m4.254s

real	0m44.075s
user	0m15.239s
sys	0m6.868s

real	0m43.869s
user	0m16.390s
sys	0m6.098s

real	0m43.057s
user	0m15.201s
sys	0m6.125s

real	0m35.825s
user	0m13.976s
sys	0m5.805s

real	0m43.277s
user	0m15.172s
sys	0m6.508s

real	0m39.534s
user	0m15.091s
sys	0m5.946s

real	0m13.594s
user	0m10.794s
sys	0m4.701s

real	0m14.218s
user	0m11.594s
sys	0m4.596s

real	8m43.416s
user	3m35.453s
sys	1m26.776s